{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\CooleX\\\\Desktop\\\\Projects\\\\logger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\CooleX\\\\Desktop\\\\Projects\\\\logger\\\\src\\\\components\\\\logs\\\\Logs.js\";\nimport React, { useState, useEffect } from 'react';\nimport LogItem from './LogItem';\nimport Preloader from '../layout/Preloader';\n\nconst Logs = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        logs = _useState2[0],\n        setLogs = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  useEffect(() => {\n    getLogs(); // eslint-disable-next-line\n  }, []);\n\n  const getLogs = async () => {\n    setLoading(true);\n    const res = await fetch('/logs');\n    const data = await res.json();\n    setLogs(data);\n    setLoading(false);\n  };\n\n  if (loading) {\n    return React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  return React.createElement(\"ul\", {\n    className: \"collection with-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"System Logs\")), !loading && logs.length === 0 ? React.createElement(\"p\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"No logs to show...\") : logs.map(log => React.createElement(LogItem, {\n    log: log,\n    key: log.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })));\n};\n\nexport default Logs;","map":{"version":3,"sources":["C:\\Users\\CooleX\\Desktop\\Projects\\logger\\src\\components\\logs\\Logs.js"],"names":["React","useState","useEffect","LogItem","Preloader","Logs","logs","setLogs","loading","setLoading","getLogs","res","fetch","data","json","length","map","log","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA,oBACSJ,QAAQ,CAAC,EAAD,CADjB;AAAA;AAAA,QACRK,IADQ;AAAA,QACFC,OADE;;AAAA,qBAEeN,QAAQ,CAAC,KAAD,CAFvB;AAAA;AAAA,QAERO,OAFQ;AAAA,QAECC,UAFD;;AAIfP,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,OAAO,GADK,CAEZ;AACH,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,OAAO,GAAG,YAAY;AACxBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAP,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAPD;;AASA,MAAID,OAAJ,EAAa;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AAED,SACI;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ,EAKH,CAACA,OAAD,IAAYF,IAAI,CAACS,MAAL,KAAgB,CAA5B,GACD;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADC,GAGGT,IAAI,CAACU,GAAL,CAASC,GAAG,IAAI,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,GAAd;AAAmB,IAAA,GAAG,EAAEA,GAAG,CAACC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,CARA,CADJ;AAaH,CAnCD;;AAqCA,eAAeb,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport LogItem from './LogItem';\r\nimport Preloader from '../layout/Preloader'\r\n\r\nconst Logs = () => {\r\n    const [logs, setLogs] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getLogs();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const getLogs = async () => {\r\n        setLoading(true);\r\n        const res = await fetch('/logs');\r\n        const data = await res.json();\r\n\r\n        setLogs(data);\r\n        setLoading(false);\r\n    }\r\n\r\n    if (loading) {\r\n        return <h4>Loading...</h4>\r\n    }\r\n\r\n    return (\r\n        <ul className=\"collection with-header\">\r\n            <li className=\"collection-header\">\r\n                <h4 className=\"center\">System Logs</h4>\r\n            </li>\r\n\r\n    {!loading && logs.length === 0 ? (\r\n    <p className=\"center\">No logs to show...</p>\r\n    ) : (\r\n        logs.map(log => <LogItem log={log} key={log.id} />)\r\n        )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Logs\r\n"]},"metadata":{},"sourceType":"module"}