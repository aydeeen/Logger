{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CooleX\\\\Desktop\\\\Projects\\\\logger\\\\src\\\\components\\\\logs\\\\Logs.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport LogItem from \"./LogItem\";\nimport Preloader from \"../layout/Preloader\";\nimport PropTypes from 'prop-types';\nimport { pipelineTopicExpression } from \"@babel/types\";\n\nconst Logs = ({\n  log: {\n    logs,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getLogs(); // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"ul\", {\n    className: \"collection with-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"System Logs\")), !loading && logs.length === 0 ? React.createElement(\"p\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"No logs to show...\") : logs.map(log => React.createElement(LogItem, {\n    log: log,\n    key: log.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })));\n};\n\nLogs.PropTypes = {\n  log: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  log;\n};\n\nexport default connect(mapStateToProps)(Logs);","map":{"version":3,"sources":["C:\\Users\\CooleX\\Desktop\\Projects\\logger\\src\\components\\logs\\Logs.js"],"names":["React","useEffect","connect","LogItem","Preloader","PropTypes","pipelineTopicExpression","Logs","log","logs","loading","getLogs","length","map","id","object","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,uBAAT,QAAwC,cAAxC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAAP,CAAD,KAAgC;AAG3CT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,GADO,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAID,OAAJ,EAAa;AACX,WAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAKG,CAACA,OAAD,IAAYD,IAAI,CAACG,MAAL,KAAgB,CAA5B,GACC;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADD,GAGCH,IAAI,CAACI,GAAL,CAASL,GAAG,IAAI,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,GAAd;AAAmB,IAAA,GAAG,EAAEA,GAAG,CAACM,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,CARJ,CADF;AAaD,CAzBD;;AA2BAP,IAAI,CAACF,SAAL,GAAiB;AACfG,EAAAA,GAAG,EAAEH,SAAS,CAACU,MAAV,CAAiBC;AADP,CAAjB;;AAIA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/BV,EAAAA,GADgC;AAEhC,CAFF;;AAIA,eAAeN,OAAO,CAACe,eAAD,CAAP,CAAyBV,IAAzB,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport LogItem from \"./LogItem\";\r\nimport Preloader from \"../layout/Preloader\";\r\nimport PropTypes from 'prop-types';\r\nimport { pipelineTopicExpression } from \"@babel/types\";\r\n\r\nconst Logs = ({ log: { logs, loading } }) => {\r\n\r\n\r\n  useEffect(() => {\r\n    getLogs();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <ul className='collection with-header'>\r\n      <li className='collection-header'>\r\n        <h4 className='center'>System Logs</h4>\r\n      </li>\r\n\r\n      {!loading && logs.length === 0 ? (\r\n        <p className='center'>No logs to show...</p>\r\n      ) : (\r\n        logs.map(log => <LogItem log={log} key={log.id} />)\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nLogs.PropTypes = {\r\n  log: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => {(\r\n  log: state.log\r\n)}\r\n\r\nexport default connect(mapStateToProps)(Logs);\r\n"]},"metadata":{},"sourceType":"module"}